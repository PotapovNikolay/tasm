Text		segment			;(1)Начало сегмента команд
		assume CS:text,DS:data	;(2)
Begin:	mov AX,data			;(3)Инициализация сегментного
		mov DS,AX			;(4)регистра DS
;Подготовим все необходимое для организации цикла
		mov CX,223			;(5)Число шагов в цикле
		mov SI,0			;(6)Индекс адресуемого элемента в ;заполняемом массиве
		mov AL,32			;(7)Код первого символа - пробела
;Теперь собственно цикл, в который входит 4 команды
fill:	mov symbols(SI),AL    ;(8)Занесение очередного кода в ;байт массива с индексом SI
		inc AL		;(9)Создадим код следующего символа
		inc SI		;(10)Сдвинемся в массиве на 1 байт
		loop fill			;(11)Команда цикла из CX шагов
;Выведем для контроля полученный символьный массив на экран
		mov AH,40h			;(12)Функция DOS вывода
		mov BX,1		;(13)Стандартный дескриптор экрана
		mov CX,223			;(14)Число выводимых байтов
		mov DX,offset symbols	;(15)Адрес выводимого сообщения
		int 21h			;(16)Вызов DOS
;Завершим программу
		mov AX,4C00h		;(17)
		int 21h			;(18)
text		ends				;(19)Конец сегмента команд
data		segment			;(20)Начало сегмента данных
;Поля данных программы
symbols	db 223 dup ('*')		;(21)Заполняемый массив
data		ends				;(22)Конец сегмента данных
stk		segment stack 'stack'	;(23)Начало сегмента стека
		dw 128 dup (0)		;(24)Стек
stk		ends				;(25)Конец сегмента стека
		end begin			;(26)Конец текста программы
